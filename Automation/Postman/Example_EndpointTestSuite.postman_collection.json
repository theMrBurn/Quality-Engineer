{

	// this test is an example of a real test collection I built to automate integrated hardware/software functions of an API
	// it will not work without the global and environmental variable .json files. 
	// this is just to provide an example of my skills building API test automation with Postman.

	"info": {
		"_postman_id": "b6dfe580-63d8-446e-a05d-0ef424b3cf00",
		"name": "Endpoint Test Suite : smart-home-api : Feb2020 Q1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup - get Credentials, setup vendor variables",
			"item": [
				{
					"name": "Auth Token",
					"item": [
						{
							"name": "Acquire fresh Auth Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code is 200 - Auth Token received\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": {{smart_home_client_id}},\n  \"audience\": {{smart_home_audience}},\n  \"scope\": {{smart_home_scopes}},\n  \"token_type\": \"Bearer\",\n  \"client_secret\": {{smart_home_client_secret}},\n  \"grant_type\": \"client_credentials\"\n}"
								},
								"url": {
									"raw": "{{smart_home_client_credentials_url}}/token",
									"host": [
										"{{smart_home_client_credentials_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Kaba Variables",
					"item": [
						{
							"name": "/devices - Create New \"KabaDevice\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KabaDevice\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new devices is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"Kaba QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors - Set new \"KabaTestVendor_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KabaTestVendor_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new KabaTestVendor_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"vendors\",\n            \"id\": 10,\n            \"attributes\": {\n                \"name\": \"Kaba QA Test\",\n                \"subaccount\": \"Vacasa Corp Dev 01\",\n                \"display_name\": \"Kaba: Vacasa Corp Dev 01\",\n                \"active\": 1,\n                \"operator_id\": \"123\",\n                \"created_at\": \"null\",\n                \"created_by\": null,\n                \"updated_at\": null,\n                \"updated_by\": \"123\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways - Set new \"KabaTestDevice_gateways_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KabaTestDevice_gateways_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new KabaTestDevice_gateways_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{KabaTestVendor_id}},\n      \"property_id\": \"Kaba QA TEST PROPERTY\",\n      \"external_id\": \"Kaba QA TEST ID\",\n      \"active\": 1,\n      \"operator_id\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes - Create new \"passcode\" Kaba",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"KabaTestPasscode\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"//it(\"if Status code is 200 - new KabaTestPasscode is created\", function () {",
											"//    expect(responseCode.code).toEql(201);",
											"//    setTimeout(function(){}, 500);",
											"//});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Operator-ID",
										"type": "text",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"passcodes\",\n    \"attributes\": {\n      \"device_gateway\": 8,\n      \"external_reference_id\": \"Kaba QA Test\",\n      \"user_type\": \"Owner\",\n      \"operator_id\": \"Kaba QA Test 1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "KeyCafe Variables",
					"item": [
						{
							"name": "/devices - Create New \"KeyCafeTestdevices\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KeyCafeTestdevices\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new devices is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"Key Cafe QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors - Set new \"KeyCafeTestVendor_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KeyCafeTestVendor_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new KeyCafeTestVendor_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"vendors\",\n            \"id\": 10,\n            \"attributes\": {\n                \"name\": \"KeyCafe\",\n                \"subaccount\": \"Vacasa Corp Dev 01\",\n                \"display_name\": \"KeyCafe: Vacasa Corp Dev 01\",\n                \"active\": 1,\n                \"operator_id\": \"123\",\n                \"created_at\": \"null\",\n                \"created_by\": null,\n                \"updated_at\": null,\n                \"updated_by\": \"123\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways - Set new \"KeyCafeTestDevice_gateways_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"KeyCafeTestDevice_gateways_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new KeyCafeTestDevice_gateways_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{KeyCafeTestVendor_id}},\n      \"property_id\": \"Key Cafe QA TEST PROPERTY\",\n      \"external_id\": \"Key Cafe QA TEST ID\",\n      \"active\": 1,\n      \"operator_id\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes - Create new \"passcode\" Key Cafe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"KeyCafeTestPasscode\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"//it(\"if Status code is 201 - new KeyCafeTestPasscode is created\", function () {",
											"//    expect(responseCode.code).toEql(201);",
											"//    setTimeout(function(){}, 500);",
											"//});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Operator-ID",
										"type": "text",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"passcodes\",\n    \"attributes\": {\n      \"device_gateway\": 10,\n      \"external_reference_id\": \"Key Cafe QA Test\",\n      \"user_type\": \"Owner\",\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PointCentral Variables",
					"item": [
						{
							"name": "/devices - Create New \"PointCentralDevice\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"PointCentralDevice\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new devices is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"PointCentral QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors - Set new \"PointCentralTestVendor_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"PointCentralTestVendor_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new PointCentralTestVendor_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"vendors\",\n            \"id\": 10,\n            \"attributes\": {\n                \"name\": \"Point Central\",\n                \"subaccount\": \"Vacasa Corp Dev 01\",\n                \"display_name\": \"Point Central: Vacasa Corp Dev 01\",\n                \"active\": 1,\n                \"operator_id\": \"123\",\n                \"created_at\": \"null\",\n                \"created_by\": null,\n                \"updated_at\": null,\n                \"updated_by\": \"123\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways - Set new \"PointCentralTestDevice_gateways_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"PointCentralTestDevice_gateways_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new PointCentralTestDevice_gateways_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{PointCentralTestVendor_id}},\n      \"property_id\": \"PointCentral QA TEST PROPERTY\",\n      \"external_id\": \"PointCentral QA TEST ID\",\n      \"active\": 1,\n      \"operator_id\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes - Create new \"passcode\" Point Central",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"PointCentralTestPasscode\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"//it(\"if Status code is 201 - new PointCentralTestPasscode is created\", function () {",
											"//    expect(responseCode.code).toEql(201);",
											"//    setTimeout(function(){}, 500);",
											"//});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Operator-ID",
										"type": "text",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"passcodes\",\n    \"attributes\": {\n      \"device_gateway\": 1,\n      \"external_reference_id\": \"PointCentral QA Test\",\n      \"external_user_id\": \"QA Test\",\n      \"first_name\": \"Test First Name\",\n      \"last_name\": \"Test Last Name\",\n      \"email\": \"test@testemail.com\",\n      \"phone\": \"1234567890\",\n      \"user_type\": \"Owner\",\n      \"operator_id\": \"PointCentral QA Test 1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lynx Variables",
					"item": [
						{
							"name": "/devices - Create New \"LynxDevice\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"LynxDevice\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new devices is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"Lynx QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors - Set new \"LynxTestVendor_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"LynxTestVendor_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new LynxTestVendor_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"vendors\",\n            \"id\": 15,\n            \"attributes\": {\n                \"name\": \"Lynx\",\n                \"subaccount\": \"Lynx\",\n                \"display_name\": \"Lynx QA testing\",\n                \"active\": 1,\n                \"operator_id\": \"Lynx QA 123\",\n                \"created_at\": \"null\",\n                \"created_by\": null,\n                \"updated_at\": null,\n                \"updated_by\": \"123\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways - Set new \"LynxTestDevice_gateways_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"LynxTestDevice_gateways_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new LynxTestDevice_gateways_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{LynxTestVendor_id}},\n      \"property_id\": \"Lynx QA-TEST-123\",\n      \"external_id\": \"Lynx QA TEST ID\",\n      \"active\": 1,\n      \"operator_id\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes - Create new \"passcode\" Lynx",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"LynxTestPasscode\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new LynxTestPasscode is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    setTimeout(function(){}, 500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Operator-ID",
										"type": "text",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"passcodes\",\n    \"attributes\": {\n      \"device_gateway\": 14,\n      \"external_reference_id\": \"Lynx QA Test\",\n      \"user_type\": \"Owner\",\n      \"operator_id\": \"Lynx QA Test 1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "RemoteLock Variables",
					"item": [
						{
							"name": "/devices - Create New \"RemoteLockDevice\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"RemoteLockDevice\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new devices is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"RemoteLock QA-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors - Set new \"RemoteLockVendor_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"RemoteLockVendor_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new RemoteLockVendor_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"vendors\",\n            \"id\": 10,\n            \"attributes\": {\n                \"name\": \"RemoteLock QA Test\",\n                \"subaccount\": \"RemoteLock Smart-Home-API Dev\",\n                \"display_name\": \"RemoteLock: Vacasa Smart-Home-API QA\",\n                \"active\": 1,\n                \"operator_id\": \"123\",\n                \"created_at\": \"null\",\n                \"created_by\": null,\n                \"updated_at\": null,\n                \"updated_by\": \"123\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways - Set new \"RemoteLockDevice_gateways_id\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"RemoteLockDevice_gateways_id\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new RemoteLockDevice_gateways_id is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{RemoteLockVendor_id}},\n      \"property_id\": \"RemoteLock QA TEST PROPERTY\",\n      \"external_id\": \"RemoteLock QA TEST ID\",\n      \"active\": 1,\n      \"operator_id\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes - Create new \"passcode\" RemoteLock",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e75a836-85db-425e-bd75-a3f3eaa2af24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e9611c2-6eac-41e4-930d-51f92bfb7e47",
										"exec": [
											"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"RemoteLockTestPasscode\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"//it(\"if Status code is 201 - new RemoteLockTestPasscode is created\", function () {",
											"//    expect(responseCode.code).toEql(201);",
											"//setTimeout(function(){}, 500);",
											"//});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Operator-ID",
										"type": "text",
										"value": "1234"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"passcodes\",\n    \"attributes\": {\n      \"device_gateway\": 12,\n      \"external_reference_id\": \"RemoteLock QA Test\",\n      \"user_type\": \"Owner\",\n      \"operator_id\": \"RemoteLock QA Test 1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4088d5df-25fe-437f-af2e-044aebd56a1a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1a05ceb3-aa57-4746-bf7f-045eeaee3e99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "VacasaLock Variables",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vendor Specific Tests",
			"item": [
				{
					"name": "Kaba tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KabaTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KabaTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Operator-ID 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KabaTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KabaTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(200);",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KabaTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KabaTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(204);",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KabaTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KabaTestPasscode}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/devices",
							"item": [
								{
									"name": "/devices/[id] - without auth: responds Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KabaDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KabaDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - devices info: with auth, is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a successful request is made, Response includes: Name = Test fixture being accessed",
													"it(\"Response includes property_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA-TEST-123\");",
													"    });",
													"",
													"// response time should remail within established threshold",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KabaDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KabaDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info: no fixture - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH failed, object does not exist\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"object does not exist\");",
													"    });",
													" ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 10\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KabaDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KabaDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });        ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed property_id to QATEST123\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QATEST123\");",
													"    });",
													" ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"active\": 1,\n            \"property_id\": \"QATEST123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KabaDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KabaDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - Delete \"device\" - Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful POST request is made, response should equal 200",
													"it(\"Status code returns status 200 (range)\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,202,203,204]);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KabaDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KabaDevice}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/device_gateways",
							"item": [
								{
									"name": "/device_gateways/[id] with auth: device_gateways info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KabaTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KabaTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devide_gateways/[id] without auth: Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											},
											{
												"description": "for now - must get token manually from https://dev.accounts.vacasa.io/test/client_credentials",
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI5YTA0ZjE3Zi03MmVhLTRlN2YtYTM4OS1iNTg1NDc3MTU3YTMiLCJleHAiOjE1NDg4NzI5NzMsImlhdCI6MTU0ODg2OTM3MywiaXNzIjoiZGV2LmFjY291bnRzLnZhY2FzYS5pbyIsImF1ZCI6ImFwaS5zbWFydC1ob21lLnZhY2FzYWRldi5pbyIsInNjb3BlcyI6WyJyZXNlcnZhdGlvbnM6cmVhZCIsInJlc2VydmF0aW9uczp3cml0ZSIsInVuaXRzOnJlYWQiLCJ1bml0czp3cml0ZSJdLCJhenAiOiIxMFBBazdQMGF4eXN2M3lEZ1JLdlRlU2V2R0JaNEhLWEZEblVlQVhQIn0.HzUqHsSulftRAGrWDrn-2lOVbPe0MlHM4mlucJ5KsJBrtXNqwrpyBkuk0DkcC9gd5w3o2acJFAXuuWhfTPozigaatIsnPbdzphGcR2XWev7mQfFlsiGQKVg9kiUD9OYlYEcE_pxMqJsgDFYOA4HAJGDVghHrV7b2XOUwA0sCJRGmOuv58pp5Auy-GOcO7CKI4uAl7zqXHZYM4YvWXzvwW0ErD-EUgljLdV6bp411y35Iq84R3lEASp4DKpcwcGWWh1dQ1wpHQ39KKT3muV05JBS8-xHJUXwZ1pOSxBYoztJhWsIjSKceUiBq4doAqmYa5T0gswKYsUzm5kiiLdNijQ",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KabaTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KabaTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] Test device_gateways PATCH:  Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    }); ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{KabaTestVendor_id}},\n      \"property_id\": \"A TEST PROPERTY\",\n      \"active\": 1,\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KabaTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KabaTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] with auth: Delete test Device Gateway returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204 - No Content\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KabaTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KabaTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] upon DELETE: Active has been switched  from 1 to 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past DEL call succesful, testSmarthubs_id, does not delete the smarthubs ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted KeyCafeTestDevice_gateways_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by updated to QA TEST fixtures\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"    (//\"property_id\", \"A TEST PROPERTY\",",
													"            \"operator_id\", \"QA TEST 1234\",",
													"                \"updated_by\", \"QA TEST 1234\",",
													"                    \"deleted_by\", \"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KabaTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KabaTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/vendors",
							"item": [
								{
									"name": "/vendors/[id] with auth - Validate PointCentralTestVendor_id is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Validate /vendor/[id]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.display_name).to.eql('Kaba: Vacasa Corp Dev 01');",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KabaTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KabaTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KabaTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KabaTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] Test Vendor PATCH Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"vendors\",\n        \"id\": {{KabaTestVendor_id}},\n        \"attributes\": {\n            \"name\": \"VirtualKey QA Test\",\n            \"subaccount\": \"Discover Sunriver\",\n            \"display_name\": \"QA testing tester\",\n            \"active\": 0,\n            \"operator_id\": \"QA TEST\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KabaTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KabaTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Delete test Vendor returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KabaTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KabaTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] upon DELETE, Active has been switched  from 1 to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past DEL call succesful, testVendor_id, does not delete the vendor ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted testVendor_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by = QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"            (\"operator_id\", \"QA TEST\",",
													"                \"updated_by\", \"QA TEST\",",
													"                    \"deleted_by\", \"QA TEST\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KabaTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KabaTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors Validate Vendors Type Kaba",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });    ",
													"    ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"    });         ",
													"    ",
													"//- will remove comment-out and present this test once KeyCafe integration is present on Stage/Prod",
													"pm.test(\"Validate Kaba is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Kaba\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "KeyCafe tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"//pm.test(\"Response contains 'header is required' \", function () {",
													"//    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KeyCafeTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KeyCafeTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Operator-ID 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KeyCafeTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KeyCafeTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(200);",
													"",
													"//    });",
													"    ",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"",
													"//setTimeout(function(){}, 500);",
													"   ",
													"//});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KeyCafeTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KeyCafeTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(204);",
													"    ",
													"//    });",
													"",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"        ",
													"//setTimeout(function(){}, 500);",
													"   ",
													"//});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{KeyCafeTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{KeyCafeTestPasscode}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/devices",
							"item": [
								{
									"name": "/devices/[id] - without auth: responds Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KeyCafeTestdevices}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KeyCafeTestdevices}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - devices info: with auth, is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a successful request is made, Response includes: Name = Test fixture being accessed",
													"it(\"Response includes property_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA-TEST-123\");",
													"    });",
													"",
													"// response time should remail within established threshold",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KeyCafeTestdevices}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KeyCafeTestdevices}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info: no fixture - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });        ",
													"   ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH failed, object does not exist\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"object does not exist\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 10\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KeyCafeTestdevices}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KeyCafeTestdevices}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });        ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed property_id to QATEST123\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QATEST123\");",
													"    });",
													" ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"active\": 1,\n            \"property_id\": \"QATEST123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KeyCafeTestdevices}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KeyCafeTestdevices}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - Delete \"device\" - Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful POST request is made, response should equal 200",
													"it(\"Status code returns status 200 (range)\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,202,203,204]);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{KeyCafeTestdevices}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{KeyCafeTestdevices}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/device_gateways",
							"item": [
								{
									"name": "/device_gateways/[id] with auth: device_gateways info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KeyCafeTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KeyCafeTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devide_gateways/[id] without auth: Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KeyCafeTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KeyCafeTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] Test device_gateways PATCH:  Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    }); ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{KeyCafeTestVendor_id}},\n      \"property_id\": \"A TEST PROPERTY\",\n      \"active\": 1,\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KeyCafeTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KeyCafeTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] with auth: Delete test Device Gateway returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204 - No Content\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KeyCafeTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KeyCafeTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] upon DELETE: Active has been switched  from 1 to 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past DEL call succesful, testSmarthubs_id, does not delete the smarthubs ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted KeyCafeTestDevice_gateways_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by updated to QA TEST fixtures\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"    (//\"property_id\", \"A TEST PROPERTY\",",
													"            \"operator_id\", \"QA TEST 1234\",",
													"                \"updated_by\", \"QA TEST 1234\",",
													"                    \"deleted_by\", \"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{KeyCafeTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{KeyCafeTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/vendors",
							"item": [
								{
									"name": "/vendors/[id] with auth - Validate KeyCafeTestVendor_id is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Validate /vendor/[id]\", function () {",
													"    var jsonData = pm.response.json();",
													"        pm.expect(jsonData.data.attributes.display_name).to.eql('KeyCafe: Vacasa Corp Dev 01');",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KeyCafeTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KeyCafeTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KeyCafeTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KeyCafeTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] Test Vendor PATCH Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"vendors\",\n        \"id\": {{KeyCafeTestVendor_id}},\n        \"attributes\": {\n            \"name\": \"KeyCafe\",\n            \"subaccount\": \"Discover Sunriver\",\n            \"display_name\": \"KeyCafe QA testing\",\n            \"active\": 0,\n            \"operator_id\": \"QA TEST\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KeyCafeTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KeyCafeTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Delete test Vendor returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KeyCafeTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KeyCafeTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] upon DELETE, Active has been switched  from 1 to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past DEL call succesful, testVendor_id, does not delete the vendor ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted testVendor_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by = QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"            (\"operator_id\", \"QA TEST\",",
													"                \"updated_by\", \"QA TEST\",",
													"                    \"deleted_by\", \"QA TEST\");",
													"    });  ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{KeyCafeTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{KeyCafeTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors Validate Vendors Type KeyCafe",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });    ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"    });",
													"",
													"//- will remove comment-out and present this test once KeyCafe integration is present on Stage/Prod",
													"pm.test(\"Validate KeyCafe is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"KeyCafe\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PointCentral tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{PointCentralTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{PointCentralTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Operator-ID 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{PointCentralTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{PointCentralTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(200);",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{PointCentralTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{PointCentralTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(204);",
													"//});",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{PointCentralTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{PointCentralTestPasscode}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/devices",
							"item": [
								{
									"name": "/devices/[id] - without auth: responds Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{PointCentralDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{PointCentralDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - devices info: with auth, is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a successful request is made, Response includes: Name = Test fixture being accessed",
													"it(\"Response includes property_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA-TEST-123\");",
													"    });",
													"",
													"// response time should remail within established threshold",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{PointCentralDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{PointCentralDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info: no fixture - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });        ",
													"   ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH failed, object does not exist\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"object does not exist\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 10\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{PointCentralDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{PointCentralDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });        ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed property_id to QATEST123\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QATEST123\");",
													"    });",
													" ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"active\": 1,\n            \"property_id\": \"QATEST123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{PointCentralDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{PointCentralDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - Delete \"device\" - Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful POST request is made, response should equal 200",
													"    it(\"Status code returns status 200 (range)\", function () {",
													"        pm.expect(pm.response.code).to.be.oneOf([201,202,203,204]);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{PointCentralDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{PointCentralDevice}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/device_gateways",
							"item": [
								{
									"name": "/device_gateways/[id] with auth: device_gateways info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{PointCentralTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{PointCentralTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devide_gateways/[id] without auth: Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{PointCentralTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{PointCentralTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] Test device_gateways PATCH:  Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    }); ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{PointCentralTestVendor_id}},\n      \"property_id\": \"A TEST PROPERTY\",\n      \"active\": 1,\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{PointCentralTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{PointCentralTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] with auth: Delete test Device Gateway returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204 - No Content\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{PointCentralTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{PointCentralTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] upon DELETE: Active has been switched  from 1 to 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past DEL call succesful, testSmarthubs_id, does not delete the smarthubs ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted KeyCafeTestDevice_gateways_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by updated to QA TEST fixtures\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"    (//\"property_id\", \"A TEST PROPERTY\",",
													"            \"operator_id\", \"QA TEST 1234\",",
													"                \"updated_by\", \"QA TEST 1234\",",
													"                    \"deleted_by\", \"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{PointCentralTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{PointCentralTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/vendors",
							"item": [
								{
									"name": "/vendors/[id] with auth - Validate PointCentralTestVendor_id is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Validate /vendor/[id]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.display_name).to.eql('Point Central: Vacasa Corp Dev 01');",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{PointCentralTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{PointCentralTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{PointCentralTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{PointCentralTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] Test Vendor PATCH Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"vendors\",\n        \"id\": {{PointCentralTestVendor_id}},\n        \"attributes\": {\n            \"name\": \"PointCentral\",\n            \"subaccount\": \"Sugar Mountain\",\n            \"display_name\": \"PointCentral: Sugar Mountain\",\n        \t\"active\": 1,\n            \"operator_id\": \"QA TEST\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{PointCentralTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{PointCentralTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Delete test Vendor returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{PointCentralTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{PointCentralTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] upon DELETE, Active has been switched  from 1 to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"",
													"            });",
													"    ",
													"//when a past DEL call succesful, testVendor_id, does not delete the vendor ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted testVendor_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by = QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"            (\"operator_id\", \"QA TEST\",",
													"                \"updated_by\", \"QA TEST\",",
													"                    \"deleted_by\", \"QA TEST\");",
													"    });  ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{PointCentralTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{PointCentralTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors Validate Vendors Type PointCentral and all sub-accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });    ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"    });",
													"",
													"//- check for PointCentral as vendor, and all accounts are present",
													"pm.test(\"Validate PointCentral is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral\");",
													"    });",
													"    ",
													"pm.test(\"Validate Discover Sunriver is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Discover Sunriver\");",
													"    });",
													"",
													"pm.test(\"Validate Key West is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Key West\");",
													"    });",
													"    ",
													"pm.test(\"Validate Book My Vacay is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Book My Vacay\");",
													"    });",
													"",
													"pm.test(\"Validate Mustang Island Ventures is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Mustang Island Ventures\");",
													"    });",
													"    ",
													"pm.test(\"Validate Range is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Range\");",
													"    });",
													"",
													"pm.test(\"Validate Sundance Cabin Rentals is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Sundance Cabin Rentals\");",
													"    });",
													"",
													"pm.test(\"Validate Beachside Vacation Rentals is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Beachside Vacation Rentals\");",
													"    });",
													"",
													"pm.test(\"Validate Island Inn on Marthas Vineyard is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Island Inn on Marthas Vineyard\");",
													"    });",
													"",
													"pm.test(\"Validate Sugar Mountain is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"PointCentral: Sugar Mountain\");",
													"  });",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lynx tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Operator-ID 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"    });",
													"    ",
													"pm.test(\"external_reference_id = Lynx QA Test\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Lynx QA Test\");",
													"    });",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Validate access_code created",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"pm.test(\"access_codes: access_code present in jsonData response\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"access_code\");",
													"});",
													"",
													"pm.test(\"Passcode : access_code must not equal '****' \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.access_codes.access_code).to.not.eql(\"****\");",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable (\"LynxTestAccess_code\", jsonData.data.attributes.access_codes[0].access_code);",
													"",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - LynxTestAccess_code is Equal to access_code in Response body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"var jsonData = JSON.parse(responseBody)",
													"",
													"pm.test(\"compare responses: LynxTestAccess_code is Equal to /GET access_code in json Response body\", () =>",
													"    pm.expect(jsonData.data.attributes.access_codes[0].access_code).to.equal(pm.environment.get(\"LynxTestAccess_code\")",
													"    ));",
													"",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{LynxTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{LynxTestPasscode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/devices",
							"item": [
								{
									"name": "/devices/[id] - without auth: responds Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{LynxDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{LynxDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - devices info: with auth, is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a successful request is made, Response includes: Name = Test fixture being accessed",
													"it(\"Response includes property_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA-TEST-123\");",
													"    });",
													"",
													"// response time should remail within established threshold",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{LynxDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{LynxDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info: no fixture - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH failed, object does not exist\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"object does not exist\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 10\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{LynxDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{LynxDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });        ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed property_id to QATEST123\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QATEST123\");",
													"    });",
													" ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"active\": 1,\n            \"property_id\": \"QATEST123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{LynxDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{LynxDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - Delete \"device\" - Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful POST request is made, response should equal 200",
													"it(\"Status code returns status 200 (range)\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,202,203,204]);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{LynxDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{LynxDevice}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/device_gateways",
							"item": [
								{
									"name": "/device_gateways/[id] with auth: device_gateways info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{LynxTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{LynxTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devide_gateways/[id] without auth: Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{LynxTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{LynxTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] Test device_gateways PATCH:  Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    }); ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{LynxTestVendor_id}},\n      \"property_id\": \"A TEST PROPERTY\",\n      \"active\": 1,\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{LynxTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{LynxTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] with auth: Delete test Device Gateway returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204 - No Content\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{LynxTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{LynxTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] upon DELETE: Active has been switched  from 1 to 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a past DEL call succesful, testSmarthubs_id, does not delete the smarthubs ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted KeyCafeTestDevice_gateways_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"        });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by updated to QA TEST fixtures\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"    (//\"property_id\", \"A TEST PROPERTY\",",
													"            \"operator_id\", \"QA TEST 1234\",",
													"                \"updated_by\", \"QA TEST 1234\",",
													"                    \"deleted_by\", \"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{LynxTestDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{LynxTestDevice_gateways_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/vendors",
							"item": [
								{
									"name": "/vendors/[id] with auth - Validate LynxTestVendor_id is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Validate /vendor/[id]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.display_name).to.eql('Lynx QA testing');",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{LynxTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{LynxTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{LynxTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{LynxTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] Test Vendor PATCH Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"vendors\",\n        \"id\": {{LynxTestVendor_id}},\n        \"attributes\": {\n            \"name\": \"Lynx QA Test\",\n            \"subaccount\": \"Lynx\",\n            \"display_name\": \"QA testing tester\",\n            \"active\": 0,\n            \"operator_id\": \"QA TEST\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{LynxTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{LynxTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Delete test Vendor returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{LynxTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{LynxTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] upon DELETE, Active has been switched  from 1 to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past DEL call succesful, testVendor_id, does not delete the vendor ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted testVendor_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"    ",
													"pm.test(\"operator_id, updated_by, deleted_by = QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"            (\"operator_id\", \"QA TEST\",",
													"                \"updated_by\", \"QA TEST\",",
													"                    \"deleted_by\", \"QA TEST\");",
													"    });  ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{LynxTestVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{LynxTestVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors Validate Vendors Type Lynx",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });    ",
													"    ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"    });         ",
													"    ",
													"pm.test(\"Validate Lynx is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Lynx\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors?filter[active]=1",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											],
											"query": [
												{
													"key": "filter[active]",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "RemoteLock tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{RemoteLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{RemoteLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Operator-ID 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{RemoteLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{RemoteLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(200);",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{RemoteLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{RemoteLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(204);",
													"//    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{RemoteLockTestPasscodes}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{RemoteLockTestPasscodes}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/devices",
							"item": [
								{
									"name": "/devices/[id] - without auth: responds Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{RemoteLockDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{RemoteLockDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - devices info: with auth, is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"//when a successful request is made, Response includes: Name = Test fixture being accessed",
													"it(\"Response includes property_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"RemoteLock QA-123\");",
													"    });",
													"",
													"// response time should remail within established threshold",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/devices/{{RemoteLockDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{RemoteLockDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info: no fixture - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"        ",
													"    });        ",
													"       ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH failed, object does not exist\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"object does not exist\");",
													"    ",
													"    }); ",
													"        ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"",
													"setTimeout(function(){}, 500);        ",
													" ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 10\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{RemoteLockDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{RemoteLockDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - update \"device\" info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"",
													"    });        ",
													"",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed property_id to QATEST123\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QATEST123\");",
													"        ",
													"    }); ",
													"        ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"",
													"setTimeout(function(){}, 500);",
													"        ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"active\": 1,\n            \"property_id\": \"QATEST123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{RemoteLockDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{RemoteLockDevice}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devices/[id] - Delete \"device\" - Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful POST request is made, response should equal 200",
													"    it(\"Status code returns status 200 (range)\", function () {",
													"        pm.expect(pm.response.code).to.be.oneOf([201,202,203,204]);",
													"    });",
													"    ",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"",
													"setTimeout(function(){}, 500);",
													"        ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"devices\",\n        \"attributes\": {\n            \"smart_hub\": 1,\n            \"property_id\": \"QA-TEST-123\",\n            \"device_make\": 1,\n            \"device_model\": 2,\n            \"device_type\": 1\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/devices/{{RemoteLockDevice}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"devices",
												"{{RemoteLockDevice}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/device_gateways",
							"item": [
								{
									"name": "/device_gateways/[id] with auth: device_gateways info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    setTimeout(function(){}, 500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{RemoteLockDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{RemoteLockDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/devide_gateways/[id] without auth: Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											},
											{
												"description": "for now - must get token manually from https://dev.accounts.vacasa.io/test/client_credentials",
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI5YTA0ZjE3Zi03MmVhLTRlN2YtYTM4OS1iNTg1NDc3MTU3YTMiLCJleHAiOjE1NDg4NzI5NzMsImlhdCI6MTU0ODg2OTM3MywiaXNzIjoiZGV2LmFjY291bnRzLnZhY2FzYS5pbyIsImF1ZCI6ImFwaS5zbWFydC1ob21lLnZhY2FzYWRldi5pbyIsInNjb3BlcyI6WyJyZXNlcnZhdGlvbnM6cmVhZCIsInJlc2VydmF0aW9uczp3cml0ZSIsInVuaXRzOnJlYWQiLCJ1bml0czp3cml0ZSJdLCJhenAiOiIxMFBBazdQMGF4eXN2M3lEZ1JLdlRlU2V2R0JaNEhLWEZEblVlQVhQIn0.HzUqHsSulftRAGrWDrn-2lOVbPe0MlHM4mlucJ5KsJBrtXNqwrpyBkuk0DkcC9gd5w3o2acJFAXuuWhfTPozigaatIsnPbdzphGcR2XWev7mQfFlsiGQKVg9kiUD9OYlYEcE_pxMqJsgDFYOA4HAJGDVghHrV7b2XOUwA0sCJRGmOuv58pp5Auy-GOcO7CKI4uAl7zqXHZYM4YvWXzvwW0ErD-EUgljLdV6bp411y35Iq84R3lEASp4DKpcwcGWWh1dQ1wpHQ39KKT3muV05JBS8-xHJUXwZ1pOSxBYoztJhWsIjSKceUiBq4doAqmYa5T0gswKYsUzm5kiiLdNijQ",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{RemoteLockDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{RemoteLockDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] Test device_gateways PATCH:  Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    }); ",
													"    ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST 1234\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"device_gateways\",\n    \"attributes\": {\n      \"vendor\": {{RemoteLockVendor_id}},\n      \"property_id\": \"A TEST PROPERTY\",\n      \"active\": 1,\n      \"operator_id\": \"QA TEST 1234\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{RemoteLockDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{RemoteLockDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] with auth: Delete test Device Gateway returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204 - No Content\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{RemoteLockDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{RemoteLockDevice_gateways_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/device_gateways/[id] upon DELETE: Active has been switched  from 1 to 0 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past DEL call succesful, testSmarthubs_id, does not delete the smarthubs ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted RemoteLockTestDevice_gateways_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"",
													"pm.test(\"operator_id, updated_by, deleted_by updated to QA TEST fixtures\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"    (//\"property_id\", \"A TEST PROPERTY\",",
													"            \"operator_id\", \"QA TEST 1234\",",
													"                \"updated_by\", \"QA TEST 1234\",",
													"                    \"deleted_by\", \"QA TEST 1234\");",
													"    setTimeout(function(){}, 500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/device_gateways/{{RemoteLockDevice_gateways_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"device_gateways",
												"{{RemoteLockDevice_gateways_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "/vendors",
							"item": [
								{
									"name": "/vendors with auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors?filter[active]=1",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											],
											"query": [
												{
													"key": "filter[active]",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors without auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Validate RemoteLockTestVendor_id is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"pm.test(\"Validate /vendor/[id]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.display_name).to.eql('RemoteLock: Vacasa Smart-Home-API QA');",
													"    });",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{RemoteLockVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{RemoteLockVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 400 - Bad Request\", function () {",
													"    expect(responseCode.code).toEql(400);",
													"    });",
													"",
													"pm.test(\"Response contains 'header is required' \", function () {",
													"    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"    });",
													"",
													"pm.test(\"Response time is less than 2500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{RemoteLockVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{RemoteLockVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] Test Vendor PATCH Record and Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b229eeeb-16bf-4171-ab88-f0855a47b3b0",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past PATCH call succesful, operator_id, updates to QA TEST",
													"pm.test(\"PATCH confirmed changed operator_id to QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"QA TEST\");",
													"    });",
													"    ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"vendors\",\n        \"id\": {{RemoteLockVendor_id}},\n        \"attributes\": {\n            \"name\": \"RemoteLock\",\n            \"subaccount\": \"RemoteLock: Vacasa Smart-Home-API QA\",\n            \"display_name\": \"QA testing tester\",\n            \"active\": 0,\n            \"operator_id\": \"QA TEST\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{RemoteLockVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{RemoteLockVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] with auth - Delete test Vendor returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 204 - No Content",
													"it(\"Status code is 204\", function () {",
													"    expect(responseCode.code).toEql(204);",
													"    });",
													"    ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Operator-ID",
												"type": "text",
												"value": "1234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{RemoteLockVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{RemoteLockVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors/[id] upon DELETE, Active has been switched  from 1 to 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });",
													"    ",
													"//when a past DEL call succesful, testVendor_id, does not delete the vendor ID, but does switch Active from 1 to 0",
													"pm.test(\"Deleted testVendor_id Active = 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.attributes.active).to.eql(0);",
													"    });",
													"    ",
													"pm.test(\"operator_id, updated_by, deleted_by = QA TEST\", function () {",
													"    pm.expect(pm.response.text()).to.include",
													"            (\"operator_id\", \"QA TEST\",",
													"                \"updated_by\", \"QA TEST\",",
													"                    \"deleted_by\", \"QA TEST\");",
													"    });  ",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors/{{RemoteLockVendor_id}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors",
												"{{RemoteLockVendor_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/vendors Validate Vendors Type RemoteLock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"it(\"Status code is 200\", function () {",
													"    expect(responseCode.code).toEql(200);",
													"    });    ",
													"    ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"    });         ",
													"    ",
													"//- validate all Remote Lock vendors are present when sending a GET to /vendors",
													"",
													"pm.test(\"Validate RemoteLock is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"RemoteLock: Wildernest\");",
													"    });",
													"    ",
													"pm.test(\"Validate RemoteLock is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"RemoteLock: RentChalets\");",
													"    });",
													"  ",
													"pm.test(\"Validate RemoteLock is present\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"RemoteLock: Abigails Vacation Rentals\");",
													"  });",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{smart_home_host}}/vendors?filter[active]=1",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"vendors"
											],
											"query": [
												{
													"key": "filter[active]",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "VacasaLock tests",
					"item": [
						{
							"name": "/passcodes",
							"item": [
								{
									"name": "/passcodes[id] with auth - new Passcode without auth Not Allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 400 - Bad Request\", function () {",
													"//    expect(responseCode.code).toEql(400);",
													"//    });",
													"",
													"//pm.test(\"Response contains 'header is required' \", function () {",
													"//    pm.expect(pm.response.text()).to.include(\"header is required\");",
													"//    });",
													"",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"//    setTimeout(function(){}, 500);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{VacasaLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{VacasaLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] - new Passcode must have Operator-ID Header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 400 - Bad Request\", function () {",
													"//    expect(responseCode.code).toEql(400);",
													"//    });",
													"",
													"//pm.test(\"Operator-ID 'header is required' \", function () {",
													"//    pm.expect(pm.response.text()).to.include(\"This value is required for retrieving passcodes\");",
													"//    });",
													"",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"//    setTimeout(function(){}, 500);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{VacasaLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{VacasaLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - passcodes info is accessable",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(200);",
													"//    });",
													"",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"//    setTimeout(function(){}, 500);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{VacasaLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{VacasaLockTestPasscode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/passcodes[id] with auth - Delete test Passcode returns 204 upon success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa80110c-3523-4147-804a-11a7454e9315",
												"exec": [
													"//eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
													"",
													"//when a successful request is made, response should equal 200",
													"//it(\"Status code is 200\", function () {",
													"//    expect(responseCode.code).toEql(204);",
													"//    });",
													"",
													"//pm.test(\"Response time is less than 2500ms\", function () {",
													"//    pm.expect(pm.response.responseTime).to.be.below(2500);",
													"//    setTimeout(function(){}, 500);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Operator-ID",
												"value": "1234",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{smart_home_host}}/passcodes/{{VacasaLockTestPasscode}}",
											"host": [
												"{{smart_home_host}}"
											],
											"path": [
												"passcodes",
												"{{VacasaLockTestPasscode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ca51308-2000-4af0-b836-a7c2f21ef7e0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69dd16b9-0a84-400f-9290-b5493d1b76f6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Endpoint Tests",
			"item": [
				{
					"name": "/activity_logging",
					"item": [
						{
							"name": "/activity_logging with Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bc26ea2-193d-4505-8dd6-af9a3a8565ad",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 200 - Success\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Validate: Type = activity_logging\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"activity_logging\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging/[id] without auth: responds Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging/1 [1st test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(1);",
											"    }); ",
											"    ",
											"pm.test(\"activity_logging operator = June Smith fixture \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"June Smith\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging/1",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging/2 [2nd test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(2);",
											"    }); ",
											"    ",
											"pm.test(\"activity_logging operator = Roger Williams fixture \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Roger Williams\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging/2",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging/3 [3rd test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(3);",
											"    }); ",
											"    ",
											"pm.test(\"activity_logging operator = Bob Roberts fixture \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Bob Roberts\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/activity_logging/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging Method:  POST \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Not Specified\",\n                \"description\": \"testing description for device make one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/activity_logging",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging Method:  PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"QA TEST PATCH\",\n                \"description\": \"testing description for device make one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/activity_logging",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity_logging Method:  DELETE \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"QA TEST PATCH\",\n                \"description\": \"testing description for device make one\"\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/activity_logging",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"activity_logging"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/devices",
					"item": [
						{
							"name": "/devices with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "/devices without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });",
											"",
											"pm.test(\"Response contains 'header is required' \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/devices",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_gateways",
					"item": [
						{
							"name": "/device_gateways with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"        setTimeout(function(){}, 500);",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_gateways without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });",
											"",
											"pm.test(\"Response contains 'header is required' \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        setTimeout(function(){}, 500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{smart_home_host}}/device_gateways",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_gateways"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/passcodes",
					"item": [
						{
							"name": "/passcodes with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });   ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        setTimeout(function(){}, 500);        ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/passcodes without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });",
											"",
											"pm.test(\"Response contains 'header is required' \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        setTimeout(function(){}, 500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/passcodes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"passcodes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/vendors",
					"item": [
						{
							"name": "/vendors with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"pm.test(\"All Vendors Present when GET/ request made\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"VirtualKey\");",
											"    pm.expect(pm.response.text()).to.include(\"PointCentral\");",
											"    pm.expect(pm.response.text()).to.include(\"KeyCafe\");",
											"    pm.expect(pm.response.text()).to.include(\"Kaba\");",
											"    pm.expect(pm.response.text()).to.include(\"RemoteLock\");",
											"    pm.expect(pm.response.text()).to.include(\"Lynx\");",
											"    pm.expect(pm.response.text()).to.include(\"VacasaLock\");",
											"});",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vendors without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });",
											"",
											"pm.test(\"Response contains 'header is required' \", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/vendors",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_configurations",
					"item": [
						{
							"name": "/device_configurations with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });    ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations/[id] without auth: responds Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations/1 [1st test fixture with auth] - device_configurations info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: Name = Test fixture being accessed",
											"it(\"Response includes Name = Test fixture being accessed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Not Specified\");",
											"    });    ",
											"",
											"//when a successful request is made, Response includes: description = description in response body   ",
											"it(\"Response includes description = description in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testing description for device configuration one\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations/1",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations/2 [2nd test fixture with auth] - device_configurations info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: Name = Test fixture being accessed",
											"it(\"Response includes Name = Test fixture being accessed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Test Configuration\");",
											"    });    ",
											"",
											"//when a successful request is made, Response includes: description = description in response body   ",
											"it(\"Response includes description = description in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testing description for device configuration two\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations/2",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations/3 [3rd test fixture with auth] - device_configurations info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: Name = Test fixture being accessed",
											"it(\"Response includes Name = Test fixture being accessed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Another Test Configuration\");",
											"    });    ",
											"",
											"//when a successful request is made, Response includes: description = description in response body   ",
											"it(\"Response includes description = description in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testing description for device configuration three\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_configurations/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations Method:  POST \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_configurations\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Not Specified\",\n                \"description\": \"testing description for device configuration one\"\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_configurations/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_configurations",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations Method:  PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_configurations\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"TEST PATCH method\",\n                \"description\": \"testing description for device configuration one\"\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_configurations/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_configurations",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_configurations Method:  DELETE \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_configurations\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"TEST DELETE method\",\n                \"description\": \"testing description for device configuration one\"\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_configurations/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_configurations",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_configurations"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_makes",
					"item": [
						{
							"name": "/device_makes with Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes/[id] without auth: responds Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes/1 [1st test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(1);",
											"    }); ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes/1",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes/2 [2nd test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.eql(2);",
											"    }); ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes/2",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes/3 [3rd test fixture with auth] - device_makes info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"//when the jsonData is parsed, the device being referenced in the GET matches the Device ID in the json    ",
											"pm.test(\"Device ID called matches Device ID in jsonData\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.eql(3);",
											"    }); ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_makes/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes Method:  POST \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Not Specified\",\n                \"description\": \"testing description for device make one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_makes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes Method:  PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"QA TEST PATCH\",\n                \"description\": \"testing description for device make one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_makes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_makes Method:  DELETE \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_makes\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"QA TEST PATCH\",\n                \"description\": \"testing description for device make one\"\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_makes/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_makes",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_makes"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_models",
					"item": [
						{
							"name": "/device_models/ POST allowed, with Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b2d08bf-42dc-4aae-88a4-3e2bd21fa7b3",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"QA_Test_Device_Model\", jsonData.data.id);",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"if Status code is 201 - new device model is created\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"device_models\",\n    \"attributes\": {\n      \"name\": \"QA Test\",\n      \"description\": \"QA_Test_Device_Model\",\n      \"enrollment_price\": 10.00,\n      \"slug\": \"QA_test_slug_create\",\n      \"created_by\": \"14084\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_models",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models Method:  POST \"not allowed\" without Auth and req objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_models\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Not Specified\",\n                \"description\": \"testing description for device model one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_models/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_models",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models with Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });    ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"        ",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models/[id] without auth: responds Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models/1 [1st test fixture with auth] - device_models info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\" equal to the /device_modes/[id]",
											"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(1);",
											"    });",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models/1",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models/2 [2nd test fixture with auth] - device_models info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\" equal to the /device_modes/[id]",
											"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(2);",
											"    });    ",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models/2",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models/3 [3rd test fixture with auth] - device_models info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\"",
											"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(3);",
											"    });    ",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models/ {{QA_Test_Device_Model}} with auth] - device_models info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"",
											"pm.test(\"jsonData = Includes test_slug_create in Response body when that ID is referenced\", function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"test_slug_create\")",
											"});",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models/{{QA_Test_Device_Model}}",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"{{QA_Test_Device_Model}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models Validate GET includes variable created by POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abf5a692-34e7-4bcb-9ee1-e9c1cd9dabea",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\", name, description, slug",
											"",
											"pm.test(\"Response Body contains expected attributes\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"QA Test\");",
											"    pm.expect(pm.response.text()).to.include(\"QA_Test_Device_Model\");",
											"    pm.expect(pm.response.text()).to.include(\"QA_test_slug_create\");",
											"    });",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_models?filter[slug][icontains]=QA_Test",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									],
									"query": [
										{
											"key": "filter[slug][icontains]",
											"value": "QA_Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models Method:  PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });    ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_models\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"TEST PATCH method\",\n                \"description\": \"testing description for device model one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_models/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_models",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_models Method:  DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(204);",
											"    });    ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"device_models\",\n            \"id\": {{QA_Test_Device_Model}},\n            \"attributes\": {\n                \"name\": \"TEST DELETE method\",\n                \"description\": \"testing description for device model one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_models/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_models/{{QA_Test_Device_Model}}",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_models",
										"{{QA_Test_Device_Model}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_status",
					"item": [
						{
							"name": "/device_status - Point Central Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code is 201\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns 'Success'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"success\");",
											"    });",
											"    ",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\"   ",
											"it(\"Message returns: 'The unit device is set up correctly'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The unit device is set up correctly.\");",
											"    });   ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 4,\n            \"device_id\": \"4315066\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Key Cafe Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code is 201\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns 'Success'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"success\");",
											"    });",
											"    ",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\"   ",
											"it(\"Message returns: 'The unit device is set up correctly'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Key is configured correctly.\");",
											"    });   ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 10,\n            \"device_id\": \"207360901\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Kaba Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code is 201\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns 'Success'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"success\");",
											"    });",
											"    ",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\"   ",
											"it(\"Message returns: 'The unit device is set up correctly'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The unit device is set up correctly.\");",
											"    });   ",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 11,\n            \"device_id\": \"TestDoor_dormakaba\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Lynx Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,203]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"failure\" -  test device not connected, should return negative response",
											"it(\"Type returns response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"    ",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\" or   ",
											"//it(\"Message returns: 'Device is connected.'\", function () {",
											"//    pm.expect(pm.response.text()).to.include(\"Device is connected.\");",
											"//    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 15,\n            \"device_id\": \"65f63dc6ce8711e9886d0ea10d3dd95c\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"Wildernest\" Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//no live vendors currently, will reactivate this test when there is a Vendor on Prod that we can replicate Locally and on Stage",
											"",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,203]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\" or   ",
											"//it(\"Message returns: 'Device not connected'\", function () {",
											"//    pm.expect(pm.response.text()).to.include(\"Device not connected. Battery Level unknown.\");",
											"//    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n\t\t\"attributes\": {\n\t\t\t\"vendor_id\": 13,\n            \"device_id\": \"330f0ed1-760c-48ae-be76-e7fa51b452e6\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"RentChalet\" Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//no live vendors currently, will reactivate this test when there is a Vendor on Prod that we can replicate Locally and on Stage",
											"",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,203]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\" or   ",
											"//it(\"Message returns: 'Device not connected'\", function () {",
											"//    pm.expect(pm.response.text()).to.include(\"Device not connected. Battery Level unknown.\");",
											"//    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 14,\n            \"device_id\": \"330f0ed1-760c-48ae-be76-e7fa51b452e6\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"Abigails Vacation Rentals\" Retrieve Device Status success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"",
											"//no live vendors currently, will reactivate this test when there is a Vendor on Prod that we can replicate Locally and on Stage",
											"",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,203]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"success\"",
											"it(\"Type returns Response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"",
											"//when a successful POST request is made, message: should return \"The unit device is set up correctly.\" or   ",
											"//it(\"Message returns: 'Device not connected'\", function () {",
											"//    pm.expect(pm.response.text()).to.include(\"Device not connected. Battery Level unknown.\");",
											"//    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 16,\n            \"device_id\": \"330f0ed1-760c-48ae-be76-e7fa51b452e6\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Point Central Retrieve Device Status - bad device_id - failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code is 201\", function () {",
											"    expect(responseCode.code).toEql(201);",
											"    });",
											"    ",
											"//when a  POST request is made, message: should return E-Lock Device ID is invalid or device is not set up properly. Contact support@pointcentral.com.\" due to bad device_id input",
											"it(\"Type Returns : Failure '\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    }); ",
											"    ",
											"it(\"Message returns: 'Unable to login to PointCentral'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"E-Lock Device ID is invalid or device is not set up properly. Contact support@pointcentral.com.\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 4,\n            \"device_id\": \"4445554\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Key Cafe Retrieve Device Status - bad device_id - failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"    it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 203, 204]);",
											"    });",
											"    ",
											"//when a POST request is made with bad data in the 'device_id', message: should return \"unitName not found.\"   ",
											"it(\"Message returns Response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 10,\n            \"device_id\": \"type type\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Kaba Retrieve Device Status - bad device_id - failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 203, 204]);",
											"});",
											"    ",
											"//when a POST request is made with bad data in the 'device_id', message: should return \"unitName not found.\"   ",
											"it(\"Message returns: TEST DEVICE ID not found in Kaba: Vacasa REST Dev DoorList.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"TEST DEVICE ID not found in Kaba: Vacasa REST Dev DoorList.\");",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 11,\n            \"device_id\": \"TEST DEVICE ID\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"Wildernest\" Retrieve Device Status bad device_id - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202, 203, 204]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"failure\" -  test device not connected, should return negative response",
											"it(\"Type returns Response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n\t\t\"attributes\": {\n\t\t\t\"vendor_id\": 13,\n            \"device_id\": \"QA BAD DEVICE ID\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"RentChalet\" Retrieve Device Status bad device_id - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 203, 204]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"failure\" -  test device not connected, should return negative response",
											"it(\"Type returns Response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 14,\n            \"device_id\": \"QA BAD DEVICE ID\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - RemoteLock \"Abigails Vacation Rentals\" Retrieve Device Status bad device_id - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 203, 204]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"failure\" -  test device not connected, should return negative response",
											"it(\"Type returns Response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 16,\n            \"device_id\": \"QA BAD DEVICE ID\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_status - Lynx Retrieve Device Status bad device_id - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful POST request is made, response should equal 200",
											"it(\"Status code returns status 200 (range)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,203]);",
											"    });",
											"    ",
											"//when a successful POST request is made, type: should return \"failure\" -  test device not connected, should return negative response",
											"it(\"Type returns Failure\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"failure\");",
											"    });",
											"    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 15,\n            \"device_id\": \"QA BAD DEVICE ID\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Local - device_status Method: GET \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a request is made, response should equal 405 - not allowed",
											"it(\"Status code is 405\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    ",
											"        });    ",
											"    ",
											"pm.test(\"Method: GET not allowed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not allowed\");",
											"    ",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Local - device_status Method: PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a request is made, response should equal 405 - not allowed",
											"it(\"Status code is 405\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    ",
											"        });    ",
											"    ",
											"pm.test(\"Method: GET not allowed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not allowed\");",
											"    ",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"device_status\",\n        \"attributes\": {\n            \"vendor_id\": 4,\n            \"device_id\": \"55555\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Local - device_status Method: DELETE \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a request is made, response should equal 405 - not allowed",
											"it(\"Status code is 405\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    ",
											"        });    ",
											"    ",
											"pm.test(\"Method: GET not allowed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not allowed\");",
											"    ",
											"    });",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_status",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_status"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/device_types",
					"item": [
						{
							"name": "/device_types with Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types Method:  POST \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\":[\n        {\n            \"type\": \"device_types\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Lock\",\n                \"description\": \"testing description for device type one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_types/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_types",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types Method:  PATCH \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\":[\n        {\n            \"type\": \"device_types\",\n            \"id\": 1,\n            \"attributes\": {\n                \"name\": \"Lock TEST\",\n                \"description\": \"testing description for device type one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_types/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_types",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types Method:  DELETE \"not allowed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(405);",
											"    });    ",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\":[\n        {\n            \"type\": \"device_types\",\n            \"id\": 0,\n            \"attributes\": {\n                \"name\": \"Lock TEST\",\n                \"description\": \"testing description for device type one\",\n                \"deleted_at\": null,\n                \"deleted_by\": null\n            },\n            \"links\": {\n                \"self\": \"http://local.smart-home-api.vacasa.io/device_types/1\"\n            }\n        }\n        ]\n}"
								},
								"url": {
									"raw": "{{smart_home_host}}/device_types",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types/[id] without auth: responds Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when no auth token provided, should return 401",
											"it(\"Status code is 400 - Bad Request\", function () {",
											"    expect(responseCode.code).toEql(400);",
											"        ",
											"    });  ",
											"",
											"//if Status Code is 400, you are not authorized. Returns message - header is required",
											"it(\"Not Authorized\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"header is required.\");",
											"",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"        ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types/1 [1st test fixture with auth] - device_type info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(1);",
											"    });    ",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types/1",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types/2 [2nd test fixture with auth] - device_type info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\"",
											"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(2);",
											"    });    ",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types/2",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/device_types/2 [3rd test fixture with auth] - device_type info is accessable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"//when a successful request is made, Response includes: \"id\"",
											"",
											"pm.test(\"jsonData = model id referenced \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(3);",
											"    });    ",
											"",
											"// response time should remail within established threshold",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});        ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/device_types/3",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"device_types",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/info",
					"item": [
						{
							"name": "/info - Status Code is 200 - no auth required",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa80110c-3523-4147-804a-11a7454e9315",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
											"",
											"//when a successful request is made, response should equal 200",
											"it(\"Status code is 200\", function () {",
											"    expect(responseCode.code).toEql(200);",
											"    });",
											"    ",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"url": {
									"raw": "{{smart_home_host}}/info",
									"host": [
										"{{smart_home_host}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Remove Test Variables",
			"item": [
				{
					"name": "/info - remove test variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa80110c-3523-4147-804a-11a7454e9315",
								"exec": [
									"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
									"",
									"pm.test(\"Remove Environment Variables\", function () {",
									"    pm.response.to.have.status(200);",
									"    // standard test varibles",
									"    postman.clearEnvironmentVariable(\"access_token\");",
									"    postman.clearEnvironmentVariable(\"testVendor_id\");",
									"    postman.clearEnvironmentVariable(\"testSmarthubs_id\");",
									"    postman.clearEnvironmentVariable(\"testDevice_gateways_id\");",
									"    postman.clearEnvironmentVariable(\"devices\");",
									"    postman.clearEnvironmentVariable(\"testPasscode\")",
									"    postman.clearEnvironmentVariable(\"QA_Test_Device_Model\");",
									"    // virtual key test varibles",
									"    //postman.clearEnvironmentVariable(\"VirtualKeyTestVendor_id\")",
									"    //postman.clearEnvironmentVariable(\"VirtualKeyTestDevice_gateways_id\")",
									"    //postman.clearEnvironmentVariable(\"VirtualKeyTestPasscode\")",
									"    //postman.clearEnvironmentVariable(\"VirtualKeyDevice\")",
									"    // point central test varibles",
									"    postman.clearEnvironmentVariable(\"PointCentralTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"PointCentralTestDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"PointCentralTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"PointCentralDevice\")",
									"    // key cafe test varibles",
									"    postman.clearEnvironmentVariable(\"KeyCafeTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"KeyCafeTestDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"KeyCafeTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"KeyCafeTestdevices\")",
									"    // kaba test varibles",
									"    postman.clearEnvironmentVariable(\"KabaTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"KabaTestDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"KabaTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"KabaDevice\")",
									"    // Lynx key test varibles",
									"    postman.clearEnvironmentVariable(\"LynxTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"LynxTestDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"LynxTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"LynxDevice\")",
									"    postman.clearEnvironmentVariable(\"LynxTestAccess_code\")",
									"    // RemoteLock key test varibles",
									"    postman.clearEnvironmentVariable(\"RemoteLockTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"RemoteLockTestDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"RemoteLockTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"RemoteLockVendor_id\")",
									"    postman.clearEnvironmentVariable(\"RemoteLockDevice_gateways_id\")",
									"    // VacasaLock key test varibles",
									"    postman.clearEnvironmentVariable(\"VacasaLockTestVendor_id\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockTest_device\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockTestPasscode\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockVendor_id\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockDevice_gateways_id\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockDevice\")",
									"    postman.clearEnvironmentVariable(\"VacasaLockTestDevice_gateways_id\")",
									"    });  ",
									"    ",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"        ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7b633c3-d537-4fac-998a-0b2140a4d600",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-type",
								"type": "text",
								"value": "application/vnd.api+json"
							},
							{
								"description": "for now - must get token manually from https://dev.accounts.vacasa.io/test/client_credentials",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI3MjFhYmIwOS0wZTY3LTQyMTktYTIzMC1jZGEwNmUwYjY5NzUiLCJleHAiOjE1NDkzOTg4NTcsImlhdCI6MTU0OTM5NTI1NywiaXNzIjoiZGV2LmFjY291bnRzLnZhY2FzYS5pbyIsImF1ZCI6ImFwaS5zbWFydC1ob21lLnZhY2FzYWRldi5pbyIsInNjb3BlcyI6WyJyZXNlcnZhdGlvbnM6cmVhZCIsInJlc2VydmF0aW9uczp3cml0ZSIsInVuaXRzOnJlYWQiLCJ1bml0czp3cml0ZSJdLCJhenAiOiIxMFBBazdQMGF4eXN2M3lEZ1JLdlRlU2V2R0JaNEhLWEZEblVlQVhQIn0.i86FFTig2PQx72Vt1YdK2VzhPSdmqU3v3SP-f7xivpbSdLy1_DaIMbqmA4-A_L4w1pHzTu5h2IOyAonUsolqrFALMBJU3AYknpuENT6DGIuSaeSJZvShUAFaYA_qQ0skGIKn0P7_ZO6NHmV6atbmXmVJ8P6asGl1kWpUQ_C4SiyTMk8x4K58SX1Er63XsBDbrAVtNHfya6jOeu9e2gU169MJxE2r7Pj1vvZVWV6DCMiYguDPJ9DdsRgN8PoLRg9eVUcSlo7xpRiULaQsxUBIrDBrfj0-iTzSW4rEx2wlV9nFiqF0MWBkGSuCrfVa7ujUV2wV9IWiGk012nEM_0vosw",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{smart_home_host}}/info",
							"host": [
								"{{smart_home_host}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ff65db00-28df-49cd-a218-d0e0187f265f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "780465a8-a242-465d-b39f-d4a600fa3c77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}